Java
작성 - 메모장 
번역 - 컴파일 도구 << 컴파일러 (compiler)
실행 - 실행 환경 << Runtime Environments

폰트 Consolas 18p


스크래치 (scratch)
프로그래밍 연습 - 아이들을 위한 프로그래밍 프로그램

뒤에서 부터 만들어서 비교할것.


JVM (Java Virtual Machine) 환경이 달라도 JVM이 적용 된다면 따로 맞추지 않아도 작동
검색 - 시스템 환경변수 - 환경변수 - 시스템변수 새로만들기 - (JAVA_HOME) , 디렉터리찾아보기 (jdk까지)
-path 더블클릭 - 편집, %JAVA_HOME%\bin새로추가 - 확인

들여쓰기 ( 스페이스로 간격 잘 맞춰줄것 - 스페이스 4칸씩)



GUI - CLI와 반대되는 것, 그래픽을 이용함
Command Line Interface (CLI) - CMD 에서 명령어를 입력해 실행
Change Director - CD 파일 이동/ .. - 1단계 위로 이동
dir - 현재 파일의 목록을 보여줌
\ - 처음으로

public class 클래스 이름) {
(들여쓰기 스페이스 4번)public static void main(String[] args) {}}
(들여쓰기 스페이스 8번)

System.out.println () => ()를 보여주겠다.


class 이름 지을때는 첫글자는 대문자

메소드 => (method) - 프로그램 시작점
; => 문장(statement) -문장의 끝, 세미콜론 마무리 할때 꼭**
// => 주석 (comment)
알파벳 하나하나는 문자, 단어는 문자열
"" => 문자열 (string)
n => 개행문자 (행을 시작한다?) ex) 1 2 3\n4 5 6\n7 8 9 일때 1 2 3 로 표기
 						    4 5 6
 						    7 8 9
"정수" => 연산자 (operator) 문자열로 표기
 숫자 => 정수
int => 정수형 (소수점이 없는) data type (자료형)
double => 실수형 (소수점이 있는)
= => 대입연산자 (assignment) '=' 같다의 의미x
연산 => 연산을 할때 나누기(/) 를 이용할때는 표시하는 정수에 소수점이 없으면 결과값은 정수로만 나온다.

NppExec  => notepad++ 에서 플러그인을 사용하기위해 적용시키는 것.

notepad++

ctrl + shift + L => 한줄씩 삭제
주석 => ctrl + K
다중편집 => 설정 - 환경설정 - 편집탭 - 다중설정 체크
% => 나누었을때 나머지값을 보여줌
정수 * 실수 => 계산값은 실수로 보여짐
ex) int 500won => 변수의 이름은 숫자로 시작하면 오류
%d => 정수하나가 오겠다 표시
println => 줄바꿈
print => 줄바꿈x
printf => 아직까지는 %d 서식문자 출력가능
근사값을 이용할때 "오차" 가 발생한다.
IEEE 754 >> 표준
p.76-77
논리형 => 참(true) , 거짓(false) 
문자형 => 캐릭터 (char = charactor)

자바에서 자릿수 표현을 위해 ','을 사용하면 컴파일 에러가 나온다. '_' 언더바를 이용해 자릿수 표현을 해준다.
정수 > byte, short, int, long >순으로 큰값 => 이를 연산할때 결과값 표출을 위해 큰값으로 표기한다.
각자의 표기가능한 범위 밖의 숫자는 음수 또는 0으로 표기한다.
실수 > float, double 도 이하동문
ex) byte sum = b + l (x)
    long sum = b + l (o)
정수 + 실수 => 실수의 형태로 따라가려함 고로 실수형태로 표기
// %xx => xx째 자리수 , 0
// xx = >빈자리는 0으로 표기
//% .xx => 소수점 자리수표기

char => 문자 하나. '' 안에는 문자 하나만 표기할것. 그렇지 않을시 오류 (uni code 표현법에따라 숫자로 문자 표기가능)

'\n' => 두글자로 이루어져있지만 하나의 글자 '개행문자' / 따로 클래스를 잡아줘도 괜찮으나, 문자열 안에 따로 넣어줘도 가능.
'\t' => Tab 정도의 공백을 표하는 문자
string => 한개의 문자로 표기가능하나 "\'"를 이용할것

true , false => 보통 1 , 0 으로 표기도 하나, java에서는 무조건 true, false로 표기
복합산술연산자(+ - * / %) 가 대입연산자( = ) 보다 앞에 와야한다.
ex a = a + 5; 를
   a += 5; 이렇게 표기가능. (+ - * / % 모두)

대입연산자 (=) x = y y를 x안에 집어넣겠다.

증감연산자 ex) a++;(+1) / a--;(-1) => 값을 1씩 증감할때 이용.
증감연산자 사용시 주의사항* 증감연산자는 변수의 앞뒤에 붙을수 있지만 증감연산자의 위치에따라 수행하는 순서가 다르다. 
앞에 붙었을 경우(++a) 더하기의 연산이 먼저 수행하나, 뒤에 붙었을 경우(a++) 연산을 신경쓰지않고 문장을 수행한다.

이 사태를 막기위해 우리는 위에서 부터 아래로 연산이 진행됨을 알고있다. 그래서 증감연산자를 출력값 전에 넣어놓으면 출력시
증감연산자가 먼저 적용되어 표기값에는 증감연산자가 적용된 값이 나온다. 

크고 작음을 비교하는 연산자는 , 관계연산자.
0 < x <= 100 이렇게 적용하려면 // System.out.println(0 <= number); 두번 적용할것.
			     System.out.println(number <= 100); 

! => 부정한다, 뒤집는다 의 의미

byte, short = > 연산을 할시 특별히 취급을 해주지않으면 int 를 따라가려 하는 습성. 결과값 에 int를 
사용하지 않으면 컴파일 오류가 생긴다. 형태가 변환한다. 자료형의 확장

ex) int i = 1000L; >> L가 i 보다 큰 값이라 컴파일 오류가 생기지만 이를 적용하고 싶을때
    long l = 10000;   바꾸고자 하는 값 앞에 (int) 를 넣어준다

         ↓

    int i = (int) 1000L;
    long l = 10000;

큰 값을 작은 값으로 바꿀때에는 항상 형태의 손실을 염두해 두어야한다.

기초형 타입, 참조형 타입
기초형 , 참조형 의 구분하는 방법은, ex) cha, int.... 시작할 때 소문자로 시작하지만 참조형은 String .. 대문자로 시작

String 의 문자열은 순서가 있다. 이 순서를 index라고 칭한다. index는 순서가 있는데 이는
0 1 2 3 ~... 순으로 0 에서 부터 시작한다.
indexOf, lastIndexOf => indexof는 앞에서부터 순서를 칭하고, lastindexof는 뒤에서부터 순서를 칭함.

valueOf => method 인데 괄호안에 문자열고 바꾸고싶은것을 넣는다.

TestString, IntegerToString 왜 하나는 숫자가 들어가도 괜찮고 하나는 괜찮지 않은가.

문자열은 참조를 한다. 문자열에서 == 를 사용할 경우 각자를 비교하는 것이 아니라 서로가 참조하는 대상이 같은지 비교한다.
서로가 같냐가 아닌 참조하는 대상이 같은지 물어본다.

equals => 자기자신과 같은 열을 참조를 해주고 같으면 true.

scan.nextLine(); 엔터를 구분자로 보고 가져온다??

System.out.println("나이를 입력: ");
int age = scan.nextInt();
System.out.println("이름을 입력: ");
scan.nextLine(); *****>>>> 없으면 위의 nextInt에 기입할때 나이 + Enter 이 같이 작동하기때문에 숫자만
빼오는 int의 특성상 남은 enter은 아래의 nextLine에서 가져와 콘솔이 끝난다.
String name = scan.nextLine();

{} => block, block이 짝만 맞으면 갯수가 몇개든 상관없다, 큰 블록안의 변수를 작은 블록이 사용가능하다. 하지만
작은 블록 안의 변수를 큰 블록에서 사용하고 할때는 사용 불가능하다. {} 메소드가 종료되면 안의 값은 사라진다.
{} 안의 변수들을 지역변수라 하며, 이들은 각 {} 위치에 따라 적용되는 범위가 다르다.

if (조건식(논리값)) {} = > if문의 형식
  () 안의 값이 참(true) 일 경우 {}안의 형식을 실행하며 프로그램이 실행/ 참일때 실행되는 블록을 then절 이라고한다.
  () 안의 값이 거짓 일 경우 {} 안의 형식을 건너뛰고 프로그램 실행

if (참) {			if (거짓) {
//문장 1				//문장1
//문장 2				//문장2
}				}
//문장 3    => 문장 123을 다읽음	//문장3  => 문장 3 을 읽는다.

boolean => 사용할때는 안의 값을 true, false 만 사용 가능하다.

if (조건식) {
	//문장 1
	//문장 2
} else {
	//문장 3
	//문장 4
}
//문장 5

else 절 옆에 조건을 물어보는 if 를 한번 더 넣을수 있다.

//// 5.20 /////////////////////////////
논리 연산자 && || !

형변환 (type conversion(casting))
자동적 형변환, 자료의 확장(promotion)
명시적 형변환, 자료의 축소(truncation), 자료 손실

참조형 타입 문자열(String)
문자열 길이(length)와 문자 인덱스(index) 범위
문자열의 동등함(equals) 비교
기초형 자료형의 문자열 변환(String.valueOf)
Scanner 문자열 콘솔 입력

////////////////////////////////////////

? => 삼항 연산자는 좌측의 불연값에 따라 우측의 콜론으로 나뉘어져있는 값중 하나를 선택해준다.
     우측의 콜론으로 나위어져있는 값은 좌측이 ture, 우측이 false.

while () {} => 자바에서 반복할때 사용하는것. (if)문과 비슷하다. true일 때에만 중괄호 안으로 들어가고 
false 일 때에는 중괄호 밖으로 나간다.



int b = 0;
while (b < a) {
System.out.println(b);
b++;         ---------------선택한 영역 내에서 반복하는 수.

for => ;'세미콜론'으로 구분되어있는 ( 1; 2; 3)
        1 - 선언문. 선언문이 비어있는경우는 앞서 변수를 선언한 경우 필요없음.
        2 - 조건식(true/ false). 조건식 부분이 빌 경우 true로 판단.
	2-1 - true 일때는 아래의 {}안으로 진행 후 중괄호가 끝날시
	3 - 으로 진행. 3으로 진행중 2번 값이 false 가 될시 for문은 끝난다.
for => 

charAt => 안의 표기는 '' 안에만

break =>
for (int i = 0; i < 10; i++) {
    if (i == 5){ // i 값이 5가 되었을때
    break;   	 // break해라 for문을 깨라. (반복문을 끝낸다.)
    }
factorial => ! 단위표시

rnadom => 숫자를 생성할때 0부터 생성한다.

switch => if else 와 비슷하게 작동. , case 안에 if, for, 문장출력 등등 이용가능
구성요소는 
switch 작동을 위한 변수 선언 후 

switch (변수) {
case 변수: < if
출력값;
break;
case 변수: < else if
출력값;
break;
...
default: < else (해당 정수값으로 케이스를 찾지못할때 넘어감, 있어도 그만 없어도 그만)
출력값;
}

for1 반복문을 for2 안에 넣으면 for1 을 for2번 반복한다.

중괄호 안의 변수 선언은 지역변수이다.

메소드의 이름. 영소문자. 여러 단어가 있으면 다음 단어의 첫번째 글자를 대문자로.동사로 표현多

메소드의 이름과 변수의 이름이 같아도 상관없다.

parameters =>  개수, 타입, 순서 지켜줄것.

public => 접근제한자. 
static => 정적

// length 는
// String a = "김정욱";
// System.out.println(a.length());

--------------------------5 -26 
메소드
메소드 헤드 : 반환형 이름 (파라미터 목록)
메소드 리므 -> 영 소문자
메소드 바디 : { ~~문장~~ }
메소드에서 값 반환하기
메소드 호출
호출 시의 값 전달

--------------------------

public class Main {
	
int number;		 
static int staticNumber; 
			 	
public void print() {    
	System.out.println("non-static");
}
		
public static void printStatic() {
	System.out.println("Static");
			
			
}
public static void main(String[] args) {
	Main main = new Main();
	Main main2 = new Main();
	Main main3 = new Main();
	Main main4 = new Main();
}
// int main = 동적
// static 정적
// 동적인 것들은 문장을 만나야 끝에서 이루어진다(main 안에서 문장을 시작한다.)
// 정적인 것들은 	(main 아닌곳에서도 문장을 시작한다.)

static 변수는 기울어진 글자로 표시된다


ex)
class Student { 학생마다 가지고있는 클래스가 아닌 학생 전체가 가지는 클래스
	static String name;
	static int kor;
}

class Student2 { 학생 하나하나가 다른 클래스를 가짐
	String name;
	int kor;
}
